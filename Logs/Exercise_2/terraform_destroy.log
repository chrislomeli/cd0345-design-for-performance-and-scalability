christopherlomeli@Christophers-MacBook-Pro Exercise_2 % terraform destroy
aws_cloudwatch_log_group.example: Refreshing state... [id=/aws/lambda/udacity-greeting-function]
aws_vpc.udacity_vpc: Refreshing state... [id=vpc-0fb1ff1f9eb924c41]
aws_iam_policy.lambda_logging: Refreshing state... [id=arn:aws:iam::346446255745:policy/lambda_logging]
aws_iam_role.iam_for_lambda: Refreshing state... [id=iam_for_lambda]
aws_iam_role_policy_attachment.lambda_logs: Refreshing state... [id=iam_for_lambda-20220607215723693400000001]
aws_lambda_function.test_lambda: Refreshing state... [id=udacity-greeting-function]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_cloudwatch_log_group.example will be destroyed
  - resource "aws_cloudwatch_log_group" "example" {
      - arn               = "arn:aws:logs:us-east-1:346446255745:log-group:/aws/lambda/udacity-greeting-function" -> null
      - id                = "/aws/lambda/udacity-greeting-function" -> null
      - name              = "/aws/lambda/udacity-greeting-function" -> null
      - retention_in_days = 14 -> null
      - tags              = {} -> null
      - tags_all          = {} -> null
    }

  # aws_iam_policy.lambda_logging will be destroyed
  - resource "aws_iam_policy" "lambda_logging" {
      - arn         = "arn:aws:iam::346446255745:policy/lambda_logging" -> null
      - description = "IAM policy for logging from a lambda" -> null
      - id          = "arn:aws:iam::346446255745:policy/lambda_logging" -> null
      - name        = "lambda_logging" -> null
      - path        = "/" -> null
      - policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:logs:*:*:*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id   = "ANPAVBKOOK2AUIBLCZHNA" -> null
      - tags        = {} -> null
      - tags_all    = {} -> null
    }

  # aws_iam_role.iam_for_lambda will be destroyed
  - resource "aws_iam_role" "iam_for_lambda" {
      - arn                   = "arn:aws:iam::346446255745:role/iam_for_lambda" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                      - Sid       = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2022-06-07T21:57:22Z" -> null
      - force_detach_policies = false -> null
      - id                    = "iam_for_lambda" -> null
      - managed_policy_arns   = [
          - "arn:aws:iam::346446255745:policy/lambda_logging",
        ] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "iam_for_lambda" -> null
      - path                  = "/" -> null
      - tags                  = {} -> null
      - tags_all              = {} -> null
      - unique_id             = "AROAVBKOOK2AZLIQS5DIA" -> null

      - inline_policy {}
    }

  # aws_iam_role_policy_attachment.lambda_logs will be destroyed
  - resource "aws_iam_role_policy_attachment" "lambda_logs" {
      - id         = "iam_for_lambda-20220607215723693400000001" -> null
      - policy_arn = "arn:aws:iam::346446255745:policy/lambda_logging" -> null
      - role       = "iam_for_lambda" -> null
    }

  # aws_lambda_function.test_lambda will be destroyed
  - resource "aws_lambda_function" "test_lambda" {
      - architectures                  = [
          - "x86_64",
        ] -> null
      - arn                            = "arn:aws:lambda:us-east-1:346446255745:function:udacity-greeting-function" -> null
      - filename                       = "greet_lambda.py.zip" -> null
      - function_name                  = "udacity-greeting-function" -> null
      - handler                        = "greet_lambda.lambda_handler" -> null
      - id                             = "udacity-greeting-function" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:346446255745:function:udacity-greeting-function/invocations" -> null
      - last_modified                  = "2022-06-07T21:57:32.232+0000" -> null
      - layers                         = [] -> null
      - memory_size                    = 128 -> null
      - package_type                   = "Zip" -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-east-1:346446255745:function:udacity-greeting-function:$LATEST" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::346446255745:role/iam_for_lambda" -> null
      - runtime                        = "python3.9" -> null
      - source_code_hash               = "EgNThvP1F5Luw79VKfOTY0UoG9Gipb+uk824HCdYVps=" -> null
      - source_code_size               = 307 -> null
      - tags                           = {} -> null
      - tags_all                       = {} -> null
      - timeout                        = 3 -> null
      - version                        = "$LATEST" -> null

      - environment {
          - variables = {
              - "greeting" = "Hi There"
            } -> null
        }

      - ephemeral_storage {
          - size = 512 -> null
        }

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

  # aws_vpc.udacity_vpc will be destroyed
  - resource "aws_vpc" "udacity_vpc" {
      - arn                              = "arn:aws:ec2:us-east-1:346446255745:vpc/vpc-0fb1ff1f9eb924c41" -> null
      - assign_generated_ipv6_cidr_block = false -> null
      - cidr_block                       = "10.0.0.0/16" -> null
      - default_network_acl_id           = "acl-0c9c0c41668425860" -> null
      - default_route_table_id           = "rtb-08569e8fddd28f082" -> null
      - default_security_group_id        = "sg-047ac86b36f46c02d" -> null
      - dhcp_options_id                  = "dopt-06415b2cb53d3f4ac" -> null
      - enable_classiclink               = false -> null
      - enable_classiclink_dns_support   = false -> null
      - enable_dns_hostnames             = false -> null
      - enable_dns_support               = true -> null
      - id                               = "vpc-0fb1ff1f9eb924c41" -> null
      - instance_tenancy                 = "default" -> null
      - ipv6_netmask_length              = 0 -> null
      - main_route_table_id              = "rtb-08569e8fddd28f082" -> null
      - owner_id                         = "346446255745" -> null
      - tags                             = {} -> null
      - tags_all                         = {} -> null
    }

Plan: 0 to add, 0 to change, 6 to destroy.

Changes to Outputs:
  - my_lambda_arn = "arn:aws:lambda:us-east-1:346446255745:function:udacity-greeting-function" -> null
  - vpcid         = {
      - arn                                  = "arn:aws:ec2:us-east-1:346446255745:vpc/vpc-0fb1ff1f9eb924c41"
      - assign_generated_ipv6_cidr_block     = false
      - cidr_block                           = "10.0.0.0/16"
      - default_network_acl_id               = "acl-0c9c0c41668425860"
      - default_route_table_id               = "rtb-08569e8fddd28f082"
      - default_security_group_id            = "sg-047ac86b36f46c02d"
      - dhcp_options_id                      = "dopt-06415b2cb53d3f4ac"
      - enable_classiclink                   = false
      - enable_classiclink_dns_support       = false
      - enable_dns_hostnames                 = false
      - enable_dns_support                   = true
      - id                                   = "vpc-0fb1ff1f9eb924c41"
      - instance_tenancy                     = "default"
      - ipv4_ipam_pool_id                    = null
      - ipv4_netmask_length                  = null
      - ipv6_association_id                  = ""
      - ipv6_cidr_block                      = ""
      - ipv6_cidr_block_network_border_group = ""
      - ipv6_ipam_pool_id                    = ""
      - ipv6_netmask_length                  = 0
      - main_route_table_id                  = "rtb-08569e8fddd28f082"
      - owner_id                             = "346446255745"
      - tags                                 = {}
      - tags_all                             = {}
    } -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_vpc.udacity_vpc: Destroying... [id=vpc-0fb1ff1f9eb924c41]
aws_lambda_function.test_lambda: Destroying... [id=udacity-greeting-function]
aws_vpc.udacity_vpc: Destruction complete after 0s
aws_lambda_function.test_lambda: Destruction complete after 0s
aws_iam_role_policy_attachment.lambda_logs: Destroying... [id=iam_for_lambda-20220607215723693400000001]
aws_cloudwatch_log_group.example: Destroying... [id=/aws/lambda/udacity-greeting-function]
aws_iam_role_policy_attachment.lambda_logs: Destruction complete after 1s
aws_cloudwatch_log_group.example: Destruction complete after 1s
aws_iam_policy.lambda_logging: Destroying... [id=arn:aws:iam::346446255745:policy/lambda_logging]
aws_iam_role.iam_for_lambda: Destroying... [id=iam_for_lambda]
aws_iam_policy.lambda_logging: Destruction complete after 0s
aws_iam_role.iam_for_lambda: Destruction complete after 0s

Destroy complete! Resources: 6 destroyed.
christopherlomeli@Christophers-MacBook-Pro Exercise_2 % 